(namespace dev)

(include "kit/header")
(import-namespace kit)

(include "kit-interface/header")
(import-namespace interface)


(include "./inc/async")
(import-namespace async)


(macro watch (fs path event ...body)
       `(.then (.watch @fs @path )
               (=> (watched)
                   (.on watched @event (=> ((lit event node))
                                           (var dir node
                                                file node
                                                directory node
                                                )
                                           ...@body)))))


(require! (lit File-system Directory File) "kit-file-system"
          (lit Compiler) "kit-repl/js/compiler"
          (lit Evaluator) "kit-repl/js/evaluator"

          Path 'path

          'assert
          'chokidar)

(def js-target-path (src-path) (+ (strip-sibilant-extension src-path) ".js"))
(def strip-sibilant-extension (path) (Path.basename path ".sibilant"))
(def compile-module (file dest)

     (print "server source file changed" file.rel)
     (pipe (.send compiler file.string)
           (.then (=> (js-string)
                      (print "compiled, saving")
                      (print js-string)
                      (.set dest (+  (strip-sibilant-extension file.rel ) ".js")
                            js-string)))
           (.catch (aprint "compiler error"))))

(var evaluator ((create Evaluator)))

(var compiler (.spawn Compiler))

(.on compiler 'error (aprint "compiler:error"))
(.on compiler 'message (aprint "compiler:message"))

(var html-header (.send compiler "(include \"./node_modules/kit-html/header\") (import-namespace markup) "))

(define src Interface
  (client (.load File-system "./src/client"))
  (server (.load File-system "./src/server"))
  (templates (.load File-system "./src/templates")))

(define js Interface

  (client (.load File-system "./client"))
  (server (.load File-system "./server"))
  (templates (.load File-system "./templates")))

(watch src.server "." "change" (compile-module file js.server))

(watch src.client "." "change" (compile-module file js.client))

(watch src.templates "." "change" (compile-module file js.templates))

