(include "kit/header")
(include "kit-interface/header")
(import-namespace kit)
(import-namespace interface)
(define Field Interface

  (init (  canvas (shape [0 0]) (state (dl.ones shape))

           ( image-data (new Image-data  (second shape)(first shape)))
           (ctx (.get-context canvas "2d"))
           ))

  (def set ([x y] v) (then (this.state.data) d (set d (+ (* y (first this.shape))
                                                          x) v)))
  (def get ([x y] ) (then (this.state.data) d (get d (+ (* y (first this.shape))
                                                         x))))
  (def-generic render (canvas shape  state image-data ctx)

    (if! (not running?) (return false))

    (var [height width] shape)

    (var d (state.buffer))
    (then (state.data) d

          (var j 0 k 0)
          (for! (i 0) (< i (* width height)) (++ i)
                (assign j (* i 4)
                        )

                (.*render-cell this (get d i) j image-data))

          (.put-image-data ctx image-data 0 0)
          )))

(define Colored Field
  (init (canvas color shape state) (.call Field.init this canvas shape state))
  (def *render-cell (a j image-data )
       (set image-data.data
            j       (Math.round (* this.color.r a))
            (+ j 1) (Math.round (* this.color.g a))
            (+ j 2) (Math.round (* this.color.b a))
            (+ j 3) 255)))
(var colored (create Colored))
