

(include "kit/header"
         "kit-interface/header"
         "./inc/async")

(import-namespace async)
(import-namespace kit)
(import-namespace interface)

(include "./inc/misc.sibilant")
;;(include "./field.sibilant")

;; (include "kit-html/src/dom")
;; (import-namespace dom)

(include "./inc/dl")
(import-namespace dl)

(require! dl 'deeplearn
          m 'mathjs)

(var running? true)


(def rgb (r g b ) (lit  r g b ))

(var W window.inner-width H window.inner-height)
(var tau (* Math.PI 2))

(def *point ([x y] [i j])
     [ (+  (Math.cos (*   (/ x i) tau))
           (Math.sin (*   (/ x i) tau)))
       (+  (Math.sin (*   (/ y j) tau))
           (Math.cos (*   (/ y j) tau)))])

(def-tidy coordinate-grid (i j)
  (var r [])

  (for! (x 0) (< x i) (++ x)
        (var r* (set r x []))
        (for! (y 0) (< y j) (++ y)
              (.push r* (*point [x y] [i j]))))

  (.reshape (.tensor dl r) [1 i j 2]))

(def-tidy point-tensor ([x y] [i j]  )
  (.reshape dl (.tensor dl (*point [x y] [i j]))
            [1 1 1 2]))

(def-tidy distance-matrix (p plane)
  (.norm  (.add plane p ) "euclidean" 3))


(def-tidy inverse-square-matrix (I c p plane)
  (.abs (.div  I (.add c (.square (distance-matrix  p plane))))))


(var coords (coordinate-grid  H W))
(var sun-pos (lit (x (/  H 2)) (y (/  W 2) )))

(var p (dl.variable (point-tensor [sun-pos.y sun-pos.x] [ H W])))


(var I (.scalar dl 0.9) c (.scalar dl 1))
(var state (dl.variable (inverse-square-matrix
                         I
                         c
                         p
                         coords)))
(def-tidy move ()
  (assign sun-pos.y (+ sun-pos.y 1)
          ;;sun-pos.x (+ sun-pos.x 1)
          )

  (.assign p (point-tensor [sun-pos.x sun-pos.y ]
                           [ H W])))
(def tick ()
     (pipe (dl.next-frame )
           (then-do
            (dl.tidy
             (-> (move)
                 (.assign state
                          (inverse-square-matrix I c p coords)))) (.render field) (tick))))
(.print state)
(var field null)

(def window.onload ()
     (var white (rgb 255 255 255))

     (var canvas (.create-element document 'canvas))
     (.append-child document.body canvas)

     (set canvas 'height  H 'width W)

     (assign field (colored canvas white [ W H] state))
     (tick)
     (set document.body.style
          'margin 0
          'padding 0))
