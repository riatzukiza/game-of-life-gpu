
(def *point ([x y] [i j])
     [
      (m.cos (*   (/ x i) tau))
      (m.sin (*   (/ y j) tau))
      ])

(def-tidy coordinate-grid ([ j i])
  (var r [])

  (for! (x 0) (< x i) (++ x)
        (var r* (set r x []))
        (for! (y 0) (< y j) (++ y)
              (.push r* (*point [x y] [i j]))))

  (.reshape (.tensor dl r) [1 i j 2]))

(def-tidy point-tensor ([x y] [i j]  )
  (.tensor dl (*point [x y] [i j])))

(def-tidy distance-matrix (p plane)
  (.norm  (.add plane p ) "euclidean" 3))


(def-tidy inverse-square-matrix (I c p plane)
  (.div  I (.add c (.square (distance-matrix  p plane)))))


(var dim [ W H])

(var coords (coordinate-grid  dim))
(var sun-pos (lit (x (/  W 2)) (y  (/  H 2))))

(var p (dl.variable (point-tensor [sun-pos.y sun-pos.x] dim)))


(var I (.scalar dl 0.9) c (.scalar dl 1))
(var state (dl.variable (inverse-square-matrix
                         I
                         c
                         p
                         coords)))
(def-tidy move ()
  (assign ;;sun-pos.y (+ sun-pos.y 1)
          sun-pos.x (+ sun-pos.x 1)
          )

  (.assign p (point-tensor [sun-pos.y sun-pos.x ]
                           dim)))
(def tick ()
     (pipe (dl.next-frame )
           (then-do
            (dl.tidy
             (-> (move)
                 (.assign state
                          (inverse-square-matrix I c p coords)))) (.render field) (tick))))
(.print state)
(var field null)

(def window.onload ()
     (var white (rgb 255 255 255))

     (var canvas (.create-element document 'canvas))
     (.append-child document.body canvas)

     (set canvas 'height  H 'width W)

     (assign field (colored canvas white dim state))
     (tick)
     (set document.body.style
          'margin 0
          'padding 0))
