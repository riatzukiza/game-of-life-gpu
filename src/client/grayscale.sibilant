(include "kit/header"
         "kit-interface/header"
         "./inc/async")


(import-namespace async)
(import-namespace kit)
(import-namespace interface)

(include "./inc/misc.sibilant")
;;(include "./field.sibilant")

;; (include "kit-html/src/dom")
;; (import-namespace dom)

(include "./inc/dl")

(require! dl 'deeplearn
          m 'mathjs)

(var running? true)

(var W window.inner-width H window.inner-height)


(macro print-v (....vals)
       `(scoped ...@(.map vals (=> (v) `(print (quote @v) @v)))
                @(last vals)))

(var grayscale-image (random-grayscale W H))

;; (def-tidy convert (imgs)

;;   (var rank_1 (.expand-dims  (.scalar dl (- imgs.rank 1)) 0))

;;   (print-v  rank_1)
;;   (var shape_list [(.ones-like dl rank_1 "int32")
;;                    (.expand-dims  (.scalar dl 3) 0)])

;;   (print-v  shape_list)
;;   (var [s1 s2] shape_list)
;;   (print-v s1 s2)

;;   (var multiples (dl.concat shape_list 0))
;;   (print-v multiples )
;;   (.tile imgs multiples))

(def-tidy convert (imgs) (.tile imgs [1 1 1 4]))
(def-async image (t)
  (var d (await t.data()))
  (new Image-data (.from Uint8ClampedArray d) (second t.shape) (third t.shape)))

(def fill-with-color (color canvas)

     (var ctx (.get-context canvas "2d"))

     (assign ctx.global-composition-operation "destination-over")
     (assign ctx.fill-style color)
     (.fill-rect ctx 0 0 canvas.width canvas.height))



(assign window.onload
        (def-async onload ()
          (var canvas (.create-element document 'canvas))
          (.append-child document.body canvas)

          (set canvas 'height  H 'width W)
          (set canvas.style
               'background-color "black")

          (var foreground (await (image (convert grayscale-image))))

          (var ctx (.get-context canvas "2d"))
          (.put-image-data ctx foreground 0 0)))
