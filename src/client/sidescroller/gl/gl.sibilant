(include "./loader.sibilant")

(var gl ((require "../../../../internal-dependencies/andy_webgl/lib/webgl/webgl.js")))

(require! (literal Vector2, Vector3, Vector4, Quaternion, Matrix2, Matrix2d, Matrix3, Matrix4)  "../../../../internal-dependencies/andy_webgl/lib/math/matrix.js"
          Timestep "../../../../internal-dependencies/andy_webgl/lib/timestep.js"

          Type "../../../../internal-dependencies/andy_webgl/lib/buffer/type.js"

          'fs)


(const Point (new Type.Composite {x: Type.float, y: Type.float, z: Type.float })
       Color (new Type.Composite {r: Type.float, g: Type.float, b: Type.float, a: Type.float })

       (literal Attribute, Buffer, Program, Shader, Uniform, float) gl

       )



(const Vertex  (new Type.Composite {point: Point, color: Color }))

(var max-points 10000)
(var verts []
     point-data-buffer (new Array-buffer (* (Type.size Vertex) max-points) )
     *vertex-size* (.size Type Vertex)
     )
(var vert-size *vertex-size*)

(var point-data-view (new Data-view point-data-buffer))

(def window.size () [window.inner-width window.inner-height])

(var gl-buffer (pipe (new Buffer
                          Buffer.target.array
                          Buffer.usage.static.draw)

                     (.bind)
                     (.data point-data-view)
                     (.unbind))

     context (pipe (new gl.Context)
                   (.resize (dots window.size())))

     P null)
(.append-child document.body (get context 'canvas))
(load-basic-program "./apps/.app/sibilant/js/gl/shaders/entity.vert.glslx"
                    "./apps/.app/sibilant/js/gl/shaders/entity.frag.glslx"
                    )






(def create-vertex (i)
  (new Vertex point-data-view (* *vertex-size* i)))


(def add-vertex ([x y z] [r g b a])
  (print context.size)
  (var v (create-vertex verts.length))
  (.push verts v)

  (move-vertex v [x y z] [r g b a])
  (print "added vertex" v)
  v
  )
(def move-vertex (v [x y z] [r g b a])
  (set-for v.point x y z )
  (set-for v.color r g b a)
  v
  )

(def render ()
  (var v (first verts))

  (pipe gl-buffer
        (.bind)
        (.data point-data-view)
        (.unbind))


  (.clear context)

  (.bind gl-buffer)
  (.enable P)

  (.draw context gl.mode.points 0 max-points)

  (.disable P)
  (.unbind gl-buffer))


(.add-event-listener window "resize" (=> (event) (.resize context) ))

;;(var time (new Timestep 30 (-> (render))))

(pipe context
      (.clear-color 0 0 0 1)
      (.clear))

;;(add-vertex [ 100 100 0 ] [ 1 1 1 1 ])

;;(move-vertex (first verts) [ 100 100 0 ] [ 1 1 1 1 ])
;;(.start time)

(print verts)
(print point-data-view)
(print point-data-buffer)
