(include "./natives/array.sibilant"
         "./natives/map.sibilant")

;;(include "./obj/interface")

;;(include "./common/promise-writer" )


(include "./math")

;; (include ;;"./html/element"
;;          "./html/dom"
;;          )

;; (require! (lit Document-node Document-root)
;;           "./lib/html/dom"
;;           )

(include "./html/dom")
(var create-document-node (create Document-node))

(include "./html/macros")

;; (require! (lit Matrix  Matrix-view Kernel ) "kit/js/matrix"
;;           (lit Tree-map) "kit/js/data-structures")

;; (require! (lit Matrix  Matrix-view Kernel ) "kit/sib/matrix"
;;           (lit Tree-map) "kit/sib/data-structures")

(include "kit/sib/data-structures/index")
(require! (lit Matrix  Matrix-view Kernel ) "kit/js/matrix")

(var matrix (create Matrix))
(var kernel (create Kernel))

(var matrix-view (create Matrix-view))

(var tree-map (create Tree-map))

;;(require! (lit State-space) "./lib/state-space.sibilant")

(var set-value (R.curry (=> (value entity) (assign entity.value value))))

(var curry R.curry)

(var (lit ( not fnot) (pipe fpipe) equals) R)

;;(include "./field.sibilant")

(def Object.prototype.each (f)
  (each (Object.keys this) (k)
        (f (get this k) k)))

(set global
     'create create
     'extend extend
     'mixin mixin)

(var green (color 0 255 0) yellow (color 255  255  0))

(def memoize (f)

  "create a memoized version of any function. A memoized function will return
previously calculated results from a cache if the arguments given to it are the same"

  (var m {})

  (cond R.has R.prop (=> ((dots args)) (f.apply this args))))
