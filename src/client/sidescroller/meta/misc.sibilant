
(macro def-memoized (name args ...body)

       ;;`(def @name @args ...@body)
       `(var @name (memoize (lambda @args ...@body))))


(macro def-generic (name args ...body)
       `(generic @name (def) @args ...@body))



(macro in ( k o) [k " in " o])
(macro generic (name def args ...body)
       `(...@(content-of def) @name
            (...@(functor (content-of args) .map (arg)

                          (if (expression? arg)
                              `(default @(first (content-of arg)) @(second (content-of arg)))
                              (or (brace? arg)
                                  (bracket? arg))
                              `(default @arg [...@(.map arg.contents
                                                        (lambda (varname)
                                                          `(get this (quote @varname))))])
                              `(default @arg (get this (quote @arg))))))
            ...@body))
