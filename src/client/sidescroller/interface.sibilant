
(namespace interface)

(include "./interface/meta")

(macro define (name base ...body)
       `(loose-var @name (.define @base (quote @name)
                                  (lit ...@body))))

(var Interface {})

(describe Interface ( *symbols {}) ( *types {})
          (init (name *obj (*types {}) (*symbols {}))))

(def-generic Interface.define
    (name

     *obj *types *symbols

     ( *shares (or *obj.borrows *obj.shares []))
     ( *ext (or *obj.extend this {}))
     )


  (if (in  *symbols name)

      (mixin *obj (get *types (get *symbols name)))
      (collect m (extend  *ext (mixin  [ (lit name (symbol (Symbol name))
                                              ;;(define Interface.define)
                                              )
                                         (dots *shares) ]
                                       *obj))
               (.call Interface.init m)

               (set *symbols name m.symbol)
               (set *types  m.symbol m)

               (when m.build (.build m )))))
