
(include "../game.sibilant")


(var physics-dot      : [ Position Velocity Dot    Physics Collision]

     physical-object  : [ Position Velocity Sprite Physics Collision]

     UP   : -1,  DOWN : 1,LEFT : -1, RIGHT : 1,
     velocity-unit    : 16,


     walk-lavo        : (.load Image "/home/aaron/Pictures/sprites/WalkLavo.png"),
     floor-tile-image : (.load Image "/home/aaron/Pictures/sprites/floortile.png"))

(print physical-object)


(var game ((create Game) [,Physics  Velocity  Collision, , ,Position   Dot, rendering]))

(var Lavo [(position 0 0)
           (velocity 0 0 )
           (sprite walk-lavo 4 1 [32 32] [1 1])
           (physics 10 32 [Gravity Friction])
           (collision 'dynamic)])

(var Player-dot [(position 0 0)
                 (velocity 0 0 )
                 (dot 0 10 255 255)
                 (physics 10 32 [Gravity Friction])
                 (collision 'dynamic)])

(var player (entity physics-dot Player-dot)

     floor (array-of 20 ((aprint "spawning floor") (entity physics-dot (floor-tile i 40)))))
(bind-player-velocity-keys
 [["w" 'yd UP]
  ["s" 'yd DOWN]
  ["d" 'xd RIGHT]
  ["a" 'xd LEFT]])

(var nothing null)

(on (.remove-all-listeners game.events 'collision)

    'collision ([c c* d])

    (var [d1x d1y d2x d2y] : d,

         max : (Math.max.apply null d)
         min : (Math.min.apply null d))

    (var physics (.get Physics c.entity))

    (when (= c.type 'dynamic)


      (when (or (= d1x max)
                (= d2x max))
        (set c.pos 'x (+ c.pos.x
                         (if (= d1x max) -1 1)
                           (* max (if (= d1x max) 1 -1))))
        (set c.velocity.xd 0))
      (when (or (= d1y max)
                (= d2y max))
        (set c.pos 'y (+ c.pos.y
                         (if (= d1y max) -1 1)
                           (* max (if (= d1y max) 1 -1))))
        (set c.velocity.yd 0))))
(.on game.events 'collision
     (aprint "collision"))



;; (.on game.events 'move
;;      (=> (v)
;;          (var sprite (.get Sprite v.entity))
;;          (.draw sprite)))
(.on game.events 'move
     (=> (v)
         (var collision (.get Collision v.entity))
         (set collision
              'colliding false)))
(.on game.events 'move
     (aprint "moved")
     )
(.start game)
