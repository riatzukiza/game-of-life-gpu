(include "../ecs")
(include "../components")
(def-lit-macro define (name parent ...body)
  `(property @name
             (.define @parent (quote @name)
                      (lit ...@body))))

(include "../sprite")

(require! Mousetrap 'mousetrap)

(define Keyboard Interface
  (def on ([key state] f)
    (fluently (.bind Mousetrap key f (+ "key" state))))

  (def once ([key state-name] f)

    (fluently
     (var key-state (+ "key" state-name))

     (.bind Mousetrap key f
            (-> (f) (.unbind Mousetrap key key-state) )
            key-state))))
(def bind-player-velocity-key ([key d s])

  (var player-velocity (.get Velocity player ))
  (var vd (get player-velocity d))

  (.on Keyboard [key 'down]
       (-> (set  player-velocity d (+ vd (* s velocity-unit)))
           false))

  (.on Keyboard [key 'up]
       (-> (set player-velocity d 0)
           false)))

(var velocity-unit 10)

(var bind-player-velocity-keys (fmap bind-player-velocity-key))

(var movable-dot [Position Dot  Velocity Collision ]
     physics-dot [Position Dot  Velocity Collision Physics ]

     UP -1 DOWN 1 LEFT -1 RIGHT 1)
(var tile [Sprite Position   Velocity Collision ]
     physical-object [Sprite Position   Velocity Collision  Physics ])


(bind-player-velocity-keys
 [["w" 'yd UP]
  ["s" 'yd DOWN]
  ["d" 'xd RIGHT]
  ["a" 'xd LEFT]])

(var sprite-sheets (.load Image "/home/aaron/Pictures/sprites/WalkLavo.png" "/home/aaron/Pictures/sprites/floortile.png"))

(var walk-lavo (.then sprite-sheets (#-> first))
     floor-tile (.then sprite-sheets (#-> second)))

(var Lavo (.spawn Entity physical-object
                  [(lit (image walk-lavo)
                        (frame-count 4)
                        (dim [32 32]))
                   (lit x y)
                   [0 0]
                   (lit (dim [32 32]))]))


(do-times 100
  (.spawn Entity tile
          [(lit (x (* i 10)) (y 400))
           (lit (scale 10) (r 255) (g 10) (b 100) (a  255))
           [0 0] null ]))

(pipe Ticker (.init 30) .start
      (.remove-all-listeners 'tick)
      (.on 'tick (-> (print "tick")
                     (.update Position)

                     (.update Physics)

                     (.update Velocity)
                     (.update Collision)

                     (.update rendering)
                     (.update Dot))))
