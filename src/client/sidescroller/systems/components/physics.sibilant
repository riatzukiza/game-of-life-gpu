(define Physical-properties Component
  (gett mass this.data.mass)
  (gett scale this.data.scale)
  (gett volume this.scale)

  (gett height this.data.height)
  (gett width this.data.width)

  (gett density (/ this.mass this.volume))

  (gett speed this.data.speed)
  (gett velocity (.get Velocity this.entity))
  (gett forces this.data.forces)

  (gett position (.get Position this.entity))
  (gett location this.position))

(define Physics Component-system
  (interface Physical-properties)
  (*forces [])
  (gett forces this.*forces)
  (def *update-component (c)
    (.each c.forces (#-> (.apply c)))))

(define Physics.Force Interface

  (def build ()
    (print "building force"
           (= this.name 'Physics.Force)
           this)
    (unless (= this.name 'Physics.Force)
      (print "adding force" this
             Physics.forces)
      (.push Physics.forces this)
      (print "done adding force" Physics.forces)))

  (def-generic apply (physical-properties)
    (throw (new (Error "force does not have an applicator.")))))

(define Gravity Physics.Force
  (def apply (c)
    (var v c.velocity)
    (var collision (.get Collision c.entity))
    (unless collision.colliding
      (print "not colliding, applying gravity")
      (incr-by v.yd 9.8))
    ))

(define Friction Physics.Force
  (def apply (c)
    (var v c.velocity)

    (var collision (.get Collision c.entity))
    (unless collision.colliding
      (print "not colliding, applying friction." )
      (incr-by v.xd (* -1 (/ v.xd 32)))
      (incr-by v.yd (* -1 (/ v.yd 32))))))
