(include "kit/macros")

(import-namespace kit)

(include "kit/header")

;; (macro def-field-instance (name ...body)
;;        `(def-interface @name
;;             (dim
;;              *context
;;              (limit (product-of dim))

;;              (tiles [])
;;              (matrix ((create Matrix ) (dots dim ) tiles)))
;;           ...@body))

;; Composition over inheritance


(def scale (arr scalar)
  (.map arr (=> (v) (* v scalar))))

(def-interface Field-element (state delta))

(def-interface Field

    (dim
     (limit (product-of dim))
     (elements [])
     (matrix ((create Matrix ) (dots dim ) elements)))

  (extend Pooled-system )

  (init (.apply Pooled-system.init this [limit this.interface]))

  (interface Field-element)

  (def-generic populate ((z 0) *context matrix *pool spacing)

    (each matrix (v x y)

          ;;(var vert (.spawn *context ))

          (var el (.spawn this vert))


          (.push this.elements el)

          ;;(set-point (dots (scale [x y z] spacing)) vert)
          ;; (set-color 0 0 0 0 vert)
          )
    )

  (def-generic update (elements *update-element)

    (.each elements *update-element)))


(export Field)
