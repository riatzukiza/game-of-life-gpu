
(def-lit-macro define (name parent ...body)
  `(property @name
             (.define @parent (quote @name)
                      (lit ...@body))))
(macro array-of (n ...body)
       `(collect array [] (do-times @n (.push array (scoped ...@body)))))

(var nothing null)
(include "./ecs"
         "./components"
         "./keyboard")

(include "./misc.sibilant")

(define Game Interface

  (init ((systems [])
         (game-speed 1)
         (entities ((create Entity-system)))
         (events ((create Event-emitter)))
         (ticker ((create Ticker) (* game-speed 60) events)))

        (.each systems (=> (s) (assign s.game this))))

  (rendering rendering)
  (gett ent this.entities)

  (def-generic start (systems events ticker rendering)

    (.stop this)
    (.start ticker)

    (on events 'tick (t)
        (.each systems (#-> (.update )))
        (.update rendering)))

  (def-generic stop (ticker events)
    (.stop ticker)
    (.remove-all-listeners events 'tick))

  (def-generic clear (systems entities events ticker)
    (.stop ticker)
    (.clear entities )
    (.remove-all-listeners events)
    (.each systems (#-> .clear))))
