(meta

 (macro glsl (...body) `(+ ...@(.map body global.glsl-macros )))

 (macro transpile-and-format (form)
        `(pipe  @form
                transpile
                output-formatter))
 (macro def-glsl-macro (name args ...body)

        (assign name (transpile-name `(@ name)))

        (var t (transpile-and-format  `(lambda @args ...@body)))

        (set glsl-macros name (eval t))

        null)

 (def global.glsl-macros (el)


   (if (expression? el)

       (do (var name (transpile-name el))

           (if (and (literal? (first el.contents))
                    (has-key? lit-macros name))

               ((get glsl-macros name) (dots (rest (content-of el))))

               `(quote @el))) el)))
(def-glsl-macro version (...args)
  `(+ "#version " ...@(interleave " " (.map args (#-> quote))) "\n"))

(def-glsl-macro in (...args)
  `(+ "in " ...@(interleave " " (.map args (#-> quote)) ) ";" "\n"))

(def-glsl-macro out (...args)
  `(+ "out " ...@(interleave " " (.map args (#-> quote)) ) ";" "\n"))

(def-glsl-macro uniform (...args)
  `(+ "uniform " ...@(interleave (" ") (.map args (#-> quote)) ) ";" "\n"))

(def-glsl-macro def-procedure (name out-type in-types ...body)
  `(+ (quote @out-type)
      (quote @name)
      "("
      ...@(.map (content-of in-types)
                (=> (t)
                    (if (> (get (content-of t) 'length) 1)
                        `(+ (quote @(first (content-of t))) " "
                            (quote @(second (content-of t))) "," ))))
      ") {"
      ...@(.map body (#-> quote))
      "}"
      )
  )


(glsl
 (version 300 es)
 (in vec3 a_point)
 (in vec4 a_color)
 (in float a_size)

 (out highp vec4 vColor)
 (uniform vec2 u_Resolution)
 (uniform float u_Scale)

 (def-procedure  clipspace_coordinate vec4
   ((vec3 xyz)
    (float scale)
    (vec2 res))
   (return (* (vec4 (/ (* xyz (vec3 1.0 1.0 1.0) scale)
                       (- (* (vec3 res 1.0) 1.98) 0.99)) 1.0)
              (vec4 1.0 -1.0 1.0 1.0))))

 (def-procedure main void
   ()
   (assign gl_Position (clipspace_coordinate a_point u_Scale u_Resolution))
   (assign gl_PointSize a_size)
   (assign vColor a_Color)))
