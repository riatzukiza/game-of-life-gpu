(def aquire-rays (source)

  (each source.verts (v) (.despawn this.layer v))

  (square source.threshold
          (=> (i j)

              (var v (.spawn this.layer))

              (set v.point
                   'x (+ x i)
                   'y (+ y j)
                   'z 0)

              (var local (Math.min
                          255
                          (inverse-square I 1
                                          (lit x y)
                                          (lit (x (+ x i))
                                               (y (+ y j))))))

              (set v 'size (Math.pow (/ local 255) 0.4))

              (print "local" i j local)

              (set v.color
                   'r 255
                   'g 255
                   'b 255
                   'a local ))))

(def-curried light-ray (point I x y i j)

  (assign point.x  (+ x i)
          point.y (+ y j)

          point.z 0)

  (var Lu (inverse-square I 1 (lit x y) (lit (x (+ x i)) (y (+ y j)))))

  (assign point.size (Math.pow (/ Lu 255) 0.4))

  (print "light ray" Lu I x y i j point)

  (assign
   point.color.r 255

   point.color.g 255

   point.color.b 255
   point.color.a (Math.min 255 Lu)))
;; (def-data light-ray   (i j)

;;   ;;(var v (.spawn this.layer))
;;   ;; we will assume there is a vertex variable.

;;   (.point
;;    (.x (+ x i))
;;    (.y (+ y j))
;;    (.z 0))

;;   (var Lu (inverse-square I 1 (lit x y) (lit (x (+ x i)) (y (+ y j)))))

;;   (.size (Math.pow (/ Ii 255) 0.4))
;;   (.color (.r 255)
;;           (.g 255)
;;           (.b 255)
;;           (.a (Math.min 255 Lu)) ))

;; (macro def-data (name args ...body)
;;        (let* ((code-indexes [])
;;               (structure
;;                (filter body (el i)
;;                        (let ((b (dotted? el)))
;;                          (unless b (.push code-indexes)) b)))

;;               (code (array-of i undotted-indexes.length
;;                               (get body (get code-indexes i))))
;;               k)

;;          `(def @name (value @args)
;;             ...@(.map body (=> (e)
;;                                (if (dotted? e)
;;                                    `()))))))

