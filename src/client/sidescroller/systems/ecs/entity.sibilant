(define Entity Interface
  (doc "used as a key to retrieve related components from different systems.")
  (init (id aspects data (components (.map data (=> (d i) (.spawn (get aspects i) this d))))))

  (def clear ()
    (.each this.components
           (=> (c) (.clear c.system this)))
    (assign this.id null))

  (def spawn (aspects data)
    (.spawn Entity-system aspects data)))

(define Entity-system Interface
  (current-id 0)
  (init ((pool ((create Dynamic-pool) Entity 256))))

  (def clear () (.clear this.pool))

  (def spawn (aspects data)
    (.spawn this.pool (incr this.current-id) aspects data))
  ;; (def define (name (lit aspects ))
  ;;   ((create Entity-group)
  ;;    name
  ;;    aspects
  ;;    )
  ;;   )
  )

(define Entity-group Interface

  (init (name aspects system (group ((create Group)))))

  (def clear ()
    (each group (e) (.clear e)))

  (def-generic spawn (data aspects system group)
    (collect e (.spawn system aspects data)
             (.add group e))))
