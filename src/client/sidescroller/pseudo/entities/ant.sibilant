(include"../ecs/entity")
(include"../ecs/group")
(include"../matrix" )
(include"../pheremons")
(include"../state-space")

(macro area (space el-name center size ...body)
       `(each-in-area @space @center
                      (=> (@el-name i j x y)
                          ...@body) @size ))


(generic moore-neighborhood (def) (w h (weight 1) (c 0))

         (var m (allns w h weight))
         (set m.array (matrix-center w h) c) m)

(def Object.prototype.each (f)
  (.each (Object.keys this) f)
  this)

(def random-color ()
  {
  red (random-int 255)
  green (random-int 255)
  blue (random-int 255)
  })

(def matrix-center (width height )
  (Math.round (/ (- (* width height) 1) 2)))


(macro if-valid-move (ent ...body )
       `(when (or (not @ent) (= @ent 0)) ...@body))

(include"../area")


;; entities require a position and a color by default

(specify Ant (extend Entity)
         (property life 1000)
         (property collision world.collision)

         (init ( pos color life )
               (genetics  member  rate mutation-factor
                          (find-rate (random-signed 1))
                          (return-rate (random-signed 1))
                          (kernel (.dmap (moore-neighborhood 3 3) (-> (random-signed 1))))))
         (getter value ()
                 {
                 genetics this.genetics
                 pos this.pos
                 color this.color
                 life this.life
                 })
         (setter value (obj)
                 (.each obj (=> (v k) (set this k v)))))

(def-generic Ant.serialize ()
  (JSON.stringify this.value))
(macro call-node-back (func ...args)
       `(make-promise (.apply @func  this [

                              ...@args

                              (=> (err value )
                                  (if err (fail err) )
                                  (success value)) ])))
(def-generic Ant.load (path)
  (pipe (call-node-back fs.read-file path)
        (.then JSON.parse)
        (.then (=> (obj) ((create (extend this obj)))))))


(def-generic Ant.*has-discovered-food  ( group  )
  (var true? false)
  (area  world.coord spot this 5
         (assign spot (.get world.collision.entities spot))
         (when (and  (not true?) (.has group.goals spot) )
           (assign this._food spot)
           (assign true? true))) true?)

(def-generic Ant.*eat  ( group )
  (.delete group.goals this._food)
  (assign this.life (+ this.life this._food.life))
  (var emission (* (gene this rate) (gene this find-rate) 10))

  (.update this.group.food-weights)
  (.emit this.group.food-weights this.pos group.weights  emission 20))
(def-generic Ant.*reproduce  (nest  group )
  ;;(print "this make babies" this)
  (assign this.life (/ this.life 2))
  (.mutate this )
  (.spawn group )
  (.update this.group.mating-weights)
  (.emit this.group.mating-weights this.pos group.mating-weights.weights
         (* 10  (gene this rate) (/ this.life Ant.life)) 20)) 

(def-generic Ant.*die  (   group )
  (.delete group this)
  (.emit this.seeking this.pos this.seeking.weights (* -10 (gene this rate)  (/ this.life Ant.life)) 20))

(def-generic Ant.mutate  ( group nest)
  ;; me think mutations aughta be put into some fancy ass abstraction some where.
  (.emit this.group.food-weights this.pos group.weights (- (gene this rate)))
  (.dmap (gene this kernel) (=> (x) (* x (random-signed 0.2))))
  (mutate this (return-rate find-rate  rate) )
  (assign this.life Ant.life ))

(def-generic Ant.*sated  (nest ant )
  (var sated? (> this.life Ant.life))
  (if sated? (assign this.seeking this.group.mating-weights)
      (assign this.seeking this.group.food-weights))
  sated?)

(def-generic Ant.*near-nest  (nest  )
  (area-has 10 spot this world.coord (and (= nest.x x) (= nest.y y))))

;; This is the function we should be calling in most instances to create an ant.
;; Ants should belong to a colony.
;; So there should be a method associated with the colony for creating ants via this method.

(def-generic Ant.choose  (group collision   )
  (var count 0

       sum 0

       done false

       choice { x this.x y this.y }
       )
  (var weights null)
  (var total-weight (=> (w i j) (+  (* w (/ this.life Ant.life) (.get (gene this kernel) i j)))))

  (each-valid-move  this this.seeking.weights.state
                    (incr-by count (total-weight w i j)))

  (var rand (* count (Math.random)))
  (each-valid-move this this.seeking.weights.state
                   (incr-by sum (total-weight w i j))
                   (when (and (<= rand sum) (not done))
                     (assign choice.x x choice.y y done true)))
  choice)

(def-generic Ant.*form-new-colony  ()

  (var sum-groups-life
       (=> (group)
           (var total-life 0)
           (each group.entities (ent)
                 (incr-by total-life ent.life)) total-life)

       new-colony ((create Colony)
                   this.pos
                   (random-color)
                   (weighted-random-element Entity-group.groups sum-groups-life)
                   (+ this.group.decay (random-signed 0.0001))))

  (.delete this.group this)
  (.add new-colony this)

  (this.group.event.emit "new species" new-colony)

  (do-times 10 (.*reproduce this))

  (assign this.color new-colony.color))

(def-generic Ant.update  (  group nest  life  )


  (var x 0 y 0)

  (-- this.life)

  (var random (random-int 0 (/ Ant.life 2)))


  (var sated? (.*sated this ))

  (if (> (* 2 this.life) random)
      (do (var choice (.choose this ))
          (.move this choice.x choice.y  )
        (if sated? (if (.*near-nest  this)
                       (.*reproduce this)
                       (> (Math.random) 0.9999)
                       (.*form-new-colony this)
                       )
            (.*has-discovered-food  this )
            (.*eat this )))
      (.*die this))
  (.emit this.seeking this.pos this.seeking.weights (* (gene this rate) (/ this.life Ant.life)) 10))


(export Ant)

(import (Event-emitter) "events")

(specify Colony (extend Entity-group)
         (property colonies (new Set) )
         (property entity-type Ant)
         (property id 0)


         (init (nest color goals (decay 0.1) colonies

                     (food-weights ((create Pheremones) color decay ))

                     (mating-weights ((create Pheremones) (color color.red color.green 255) decay ))
                     (event (new Event-emitter))
                     (ants []))
               (assign this.id (++ Colony.id))
               (Entity-group.init.call this)

               (.add colonies this))

         )

(def-generic Colony.spawn  (color entity-type)

  (var rx (ternary (= (random-bit) 1) 1 -1))
  (var ry (ternary (= (random-bit) 1) 1 -1))

  (var ent (.spawn entity-type
                   (+ this.nest.x (random-int 1 30) )
                   (+ this.nest.y (random-int 1 30) ) color))

  (when ent
    (assign ent.group this)
    (assign ent.seeking this.food-weights)
    (this.add ent)
    (.push this.ants ent)
    (assign ent.nest this.nest)
    (.emit this.event "spawn" ent)
    ent) this)

(def-generic Colony.serialize  (ants)
  (JSON.stringify (map (.to-array ants) (ant) (.serialize ant))))

(def-generic Colony.load (path)
  (call-node-back fs.read-file path ))

(def-generic Colony.save (path)
  (macro call-node-back (func ...args)
         `(make-promise (.apply @func  this [

                                ...@args

                                (=> (err value )
                                    (if err (fail err) )
                                    (success value)) ])))

  (call-node-back fs.write-file path (.serialize this)))

(def-generic Colony.update  (entities weights decay mating-weights food-weights)
  "Process the movement of ever ant in a set of ants, updating weights along the way."
  ;;(var has (R.invoker 1 "has"))
  ;;(assign this.ants ((R.pipe (R.filter (has R.__ entities)) (R.map update)) this.ants))

  (var update (=> (ant) (.update ant ) ant))
  (var has (=> (entities) (=> (ant) (.has this.entities ant))))

  (assign this.ants (pipe
                     this.ants
                     (.each  update)
                     (.filter  (has entities))))

  (when (= this.entities.size 0)
    (.emit this.event "extinct" this)
    ;; remove this and the calls on pheremons to disable displaying weights
    ;;(.remove sim.layers this.layer)
    (.delete this.colonies this)))

(export Colony)

